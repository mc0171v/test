
//*********************************************************************
// Define dependencies of plugins.
//*********************************************************************
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        // To allow SonarQube plugin
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("se.transmode.gradle:gradle-docker:${dockerPluginVersion}")

        // SonarQube plugin
        classpath "org.sonarqube.gradle:gradle-sonarqube-plugin:${sonarqubePluginVersion}"
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementPluginVersion}")

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('net.researchgate:gradle-release:2.3.4')
    }
}

//*********************************************************************
// Import common dependency groups.
//*********************************************************************
apply from: 'libraries.gradle'

//*********************************************************************
// Release plugin only applied to root - Will only build root
// but dependecy update subs will change versions in other projects
//*********************************************************************
apply plugin: 'net.researchgate.release'

task(updateSubs) << {
  def versionToBeUpdated
  if (project.version.contains('SNAPSHOT')) {
    versionToBeUpdated=tagVersion
  } else {
    versionToBeUpdated=prereleaseVersion
  }
  FileTree tree = fileTree(project.projectDir)
  tree.each {File file ->
    if (file.text.contains(versionToBeUpdated)) {
      def updated = file.text.replaceAll(versionToBeUpdated,project.version)
      file.write(updated)
    }
  }
}

//*********************************************************************
// Update SNAPSHOT to release version
//*********************************************************************
beforeReleaseBuild.dependsOn updateSubs
//*********************************************************************
// Update release to new SNAPSHOT version
//*********************************************************************
commitNewVersion.dependsOn updateSubs

release {
  tagTemplate = '$name-$version'
  failOnSnapshotDependencies = false
}

//*********************************************************************
// Sonarqube is only applied to the root project.
// Password should be set in personal user properties
// e.g. sonarPassword=MyPassword
//*********************************************************************
apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarqube.vennetics.com/sonarqube"
        property "sonar.login", "VenneticsDev"
        property "sonar.password", sonarPassword
        property "sonar.projectKey", "com.vennetics:bell-sam"
        property "sonar.projectName", "Bell Service API Mediation"
    }
}

//*********************************************************************
// Multi-project setup applicable to all projects including the root.
//*********************************************************************
allprojects {

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    jar { onlyIf { project.name != rootProject.name } }

    apply plugin: 'io.spring.dependency-management'
    

    dependencyManagement {
        dependencies {
            dependency "junit:junit:${junitVersion}"
            dependency "org.mockito:mockito-all:${mockitoVersion}"
            dependency "commons-io:commons-io:${commonsIOVersion}"
            dependency "org.hamcrest:hamcrest-all:${hamcrestVersion}"
            dependency "com.jayway.jsonpath:json-path:${jaywayJsonPathVersion}"
            dependency "com.netflix.rxjava:rxjava-core:${rxJavaVersion}"
            dependency "com.netflix.hystrix:hystrix-core:${hystrixVersion}"
            dependency "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jacksonVersion}"
            dependency "org.jvnet.jaxb2_commons:jaxb2-basics-runtime:${jaxb2BasicsVersion}"
            dependency "de.codecentric:spring-boot-admin-server:${springAdminServerVersion}"
            dependency "de.codecentric:spring-boot-admin-server-ui:${springAdminServerUiVersion}"
            dependency "org.jolokia:jolokia-core:${jolokiaCoreVersion}"
        }
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentBomVersion}"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/repo" }
    }

    checkstyle {
        configFile = file("$rootProject.projectDir/codequality/vennetics-checkstle-config.xml")
        reportsDir = file("$project.buildDir/checkstyle")
    }

    pmd {
        ruleSetFiles = files("$rootProject.projectDir/codequality/vennetics-pmd-rules.xml")
        reportsDir = file("$project.buildDir/pmd")
    }

    findbugs {
        excludeFilter = file("$rootProject.projectDir/codequality/vennetics-findbugs-exclude.xml")
        effort = "max"
        reportLevel = "high"
        reportsDir = file("$project.buildDir/findbugs")
    }

    eclipse {
        classpath {
            containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
            containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
        }
    }
}

//*********************************************************************
// Applicable to sub-projects but not the root project
//*********************************************************************
subprojects {

    apply plugin: 'docker'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    
    dependencies {
        testCompile("junit:junit")
        // All test projects should support our categories.
        testCompile("com.vennetics.shared:com.vennetics.shared.test.utils:${venneticsTestUtilsVersion}") { 
            transitive = false 
        }

    }

    jar {
        manifest {
            attributes("Implementation-Title": "Vennetics",
            "Implementation-Version": jar.version)
        }
    }

    jar.doLast { task ->
        ant.checksum file: task.archivePath
    }

    //*****************************************************************
    // Jacoco configuration.
    //*****************************************************************

    jacoco {
        toolVersion jacocoToolVersion
        reportsDir = file("$project.buildDir/jacoco")
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
            //html.destination "${buildDir}/jacocoHtml"
            csv.destination "${buildDir}/jacocoCsv"
            xml.destination "${buildDir}/jacocoXml"
        }
    }
    
    sonarqube {
        properties {
            property "sonar.jacoco.reportPath", "$buildDir/jacoco/jacocoUnitTest.exec"
            property "sonar.jacoco.itReportPath", "$buildDir/jacoco/jacocoIntegrationTest.exec"
        }
    }

    //*****************************************************************
    // Any failing test will terminate the build, unless --continue
    // option specified.
    //*****************************************************************

    tasks.withType(Test) {
        ignoreFailures = gradle.startParameter.continueOnFailure
    }

    //*****************************************************************
    // Unit Test configuration.
    //*****************************************************************
    
    test {
        useJUnit { 
            excludeCategories 'com.vennetics.shared.test.utils.categories.IntegrationTest'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoUnitTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps/unit")
        }
        enableAssertions = false
        jvmArgs += ["-XX:+HeapDumpOnOutOfMemoryError"]
    }

    //*****************************************************************
    // Integration Test configuration.
    //*****************************************************************
    
    task integrationTest(type: Test) {
        description 'Run the suite of Junit tests annotated with @Category(IntegrationTest)'
        useJUnit { 
            includeCategories 'com.vennetics.shared.test.utils.categories.IntegrationTest'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
            classDumpFile = file("$buildDir/jacoco/classpathdumps/integration")
        }
        enableAssertions = false
        jvmArgs += ["-XX:+HeapDumpOnOutOfMemoryError"]
    }

    //*****************************************************************
    // Docker configuration.
    //*****************************************************************

    if (new File("${project.projectDir}/src/main/docker").exists()) {
        task buildDocker(type: Docker, dependsOn: build) {
            description "Builds a docker image for any project that contains a docker definition file. \n" +
                "   By default this will not push the image to Docker Hub but this can be overwritten by -PpushImagesToDocker=true\n" +
                "   By default images will be tagged as 'latest' but this can be overwritten by -PuseJarVersionForDockerTag=true which will instead tag the image with the version of the jar."
            // Determine if we should push the images to Docker Hub
            pushImagesToDocker = Boolean.parseBoolean(pushImagesToDocker)
            // Determine if we should tag images with "latest" or with version of jar
            def tagToUse = Boolean.parseBoolean(useJarVersionForDockerTag) ? jar.version : "latest"
            push = pushImagesToDocker
            applicationName = dockerRepositoryPrefix + jar.baseName
            tagVersion = tagToUse
            dockerfile = file('src/main/docker/Dockerfile')
            project.group = 'vennetics'
            // Ensure that the jar and any keys are placed relative to the
            // docker build directory. See more on the docker content and
            // the ADD command here: http://docs.docker.com/engine/reference/builder/#add
            doFirst {
                // Define the path to the private key used to access the bell-sam-config
                // git repo. This validates that the file exists and if not it will fail
                // the build!!!
                def homePath = System.properties['user.home']
                def privateKey = homePath + '/.ssh/id_rsa.bell-sam-config'
                assert file(privateKey).exists() 
                copy {
                    from jar
                    from privateKey
                    into stageDir
                }
            }
        }
    }

    //*****************************************************************
    // Filter any resource files, replacing gradle property references
    // such as @baseName@.
    //*****************************************************************
    configure(allProcessResourcesTasks(project)) {
        filter(org.apache.tools.ant.filters.ReplaceTokens,
                tokens: [baseName: project.jar.baseName,
                         version: project.jar.version,
                         gradleVersion: project.gradle.gradleVersion]
        )
    }
}

//*********************************************************************
// Deliver the process resource tasks for a given project.
//*********************************************************************
def allProcessResourcesTasks(project) {
    project.sourceSets*.processResourcesTaskName.collect {
        project.tasks[it]
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}
